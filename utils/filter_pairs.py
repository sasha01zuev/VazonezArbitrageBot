import logging
from typing import List, Dict


async def recalculate_and_filter_by_net_profit(pairs: dict) -> dict:
    updated_pairs = {}

    for key, data in pairs.items():
        try:
            original_profit = float(data.get("net_profit", 0))
            fee_buy = float(data.get("spot_fee_first_exchange", 0))
            fee_sell = float(data.get("spot_fee_second_exchange", 0))

            clean_profit = original_profit - fee_buy - fee_sell
            if clean_profit > 0:
                data["net_profit"] = round(clean_profit, 2)
                updated_pairs[key] = data

        except Exception as e:
            logging.exception(f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ {key}: {e}")
            continue

    return updated_pairs


async def recalculate_spread_from_net_profit(pairs: dict) -> dict:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç spread –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∫–∏ –∫–∞–∫:
    spread = (net_profit / volume_usdt) * 100
    """
    updated_pairs = {}

    for key, data in pairs.items():
        try:
            net_profit = float(data.get("net_profit", 0))
            volume_usdt = float(data.get("volume_usdt", 0))

            if volume_usdt == 0:
                continue  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

            spread = (net_profit / volume_usdt) * 100
            data["spread"] = round(spread, 2)  # –º–æ–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏

            updated_pairs[key] = data

        except (ValueError, TypeError) as e:
            logging.exception(f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ {key}: {e}")
            continue  # –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤—è–∑–∫—É

    return updated_pairs


async def filter_significant_pairs_changes(current_pairs: dict, previous_pairs: dict) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å–≤—è–∑–∫–∏.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ –∫–ª—é—á—É (exchange1:exchange2:coin).
    """

    def is_significant_change(pair_key: str, prev_data: dict, curr_data: dict) -> bool:
        try:
            prev_profit = float(prev_data.get("net_profit", 0))
            curr_profit = float(curr_data.get("net_profit", 0))
            prev_spread = float(prev_data.get("spread", 0))
            curr_spread = float(curr_data.get("spread", 0))

            profit_diff = curr_profit - prev_profit
            spread_diff = curr_spread - prev_spread

            # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
            if profit_diff >= 2.0:
                print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data["net_profit"]}\n"
                      f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data["net_profit"]}\n")
                print(
                    f"‚úÖ {pair_key} ‚Äî net_profit –∏–∑–º–µ–Ω–∏–ª—Å—è: –±—ã–ª–æ {prev_profit:.2f} ‚Üí —Å—Ç–∞–ª–æ {curr_profit:.2f} "
                    f"(+{profit_diff:.2f} USDT)\n\n")
                return True

            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
            if prev_profit > 0:
                profit_percent_change = (profit_diff / prev_profit) * 100
                if profit_percent_change >= 20:
                    print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data['net_profit']}\n"
                          f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data['net_profit']}\n")
                    print(
                        f"‚úÖ {pair_key} ‚Äî net_profit –≤—ã—Ä–æ—Å –Ω–∞ {profit_percent_change:.1f}% "
                        f"(–±—ã–ª–æ {prev_profit:.2f} ‚Üí —Å—Ç–∞–ª–æ {curr_profit:.2f})\n\n")
                    return True

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞
            if spread_diff >= 0.5:
                print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data['spread']}\n"
                      f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data['spread']}\n")
                print(
                    f"‚úÖ {pair_key} ‚Äî spread –∏–∑–º–µ–Ω–∏–ª—Å—è: –±—ã–ª–æ {prev_spread:.2f}% ‚Üí —Å—Ç–∞–ª–æ {curr_spread:.2f}% "
                    f"(+{spread_diff:.2f}%)\n\n")
                return True

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            print(
                f"‚ùå {pair_key} ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: "
                f"net_profit {prev_profit:.2f} ‚Üí {curr_profit:.2f} "
                f"(Œî={profit_diff:.2f}), spread {prev_spread:.2f}% ‚Üí {curr_spread:.2f}% (Œî={spread_diff:.2f}%)"
            )

        except (ValueError, TypeError, ZeroDivisionError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä—ã {pair_key}: {e}")

        return False

    result = {}

    for key, current_data in current_pairs.items():
        previous_data = previous_pairs.get(key)

        if previous_data is None:
            print(f"üÜï –ù–æ–≤–∞—è —Å–≤—è–∑–∫–∞: {key}")
            result[key] = current_data
        elif is_significant_change(key, previous_data, current_data):
            result[key] = current_data
        # –∏–Ω–∞—á–µ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

    return result


async def group_and_pack_pairs_into_messages(pairs: Dict[str, dict], previous_pairs: Dict[str, dict]) -> List[str]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–≤—è–∑–∫–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º –∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    –ù–æ–≤—ã–µ —Å–≤—è–∑–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∑–∞—Ç–µ–º ‚Äî —Å—Ç–∞—Ä—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞.
    """
    max_message_length = 4096
    max_messages_per_batch = 10

    def format_pair(arbitrage_pair: dict) -> str:
        return (
            f"<b>{arbitrage_pair['exchange_buy']} ‚Üí {arbitrage_pair['exchange_sell']}</b>\n"
            f"<b>–ü—Ä–æ—Ñ–∏—Ç:</b> {arbitrage_pair['net_profit']} USDT\n"
            f"<b>–°–ø—Ä–µ–¥:</b> {arbitrage_pair['spread']}%</b>\n"
            f"<b>–°–µ—Ç—å:</b> {arbitrage_pair['network']}\n"
            f"<b><a href=\"{arbitrage_pair['first_exchange_deposit_withdraw_links']['withdraw_link']}\">–í—ã–≤–æ–¥</a></b> | "
            f"<b><a href=\"{arbitrage_pair['second_exchange_deposit_withdraw_links']['deposit_link']}\">–î–µ–ø–æ–∑–∏—Ç</a></b>\n\n"
        )

    # 1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –∏ —Å—Ç–∞—Ä—ã–µ
    new_pairs = {k: v for k, v in pairs.items() if k not in previous_pairs}
    old_pairs = {k: v for k, v in pairs.items() if k in previous_pairs}

    # 2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –Ω–æ–≤—ã–µ (–≤–≤–µ—Ä—Ö) + —Å—Ç–∞—Ä—ã–µ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ net_profit ‚Üì)
    sorted_pairs = {
        **{k: new_pairs[k] for k in sorted(new_pairs, key=lambda x: float(new_pairs[x].get("net_profit", 0)), reverse=True)},
        **{k: old_pairs[k] for k in sorted(old_pairs, key=lambda x: float(old_pairs[x].get("net_profit", 0)), reverse=True)}
    }

    # 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º
    grouped_by_coin = {}
    for key, pair in sorted_pairs.items():
        coin = pair.get("coin")
        if coin not in grouped_by_coin:
            grouped_by_coin[coin] = []
        grouped_by_coin[coin].append(pair)

    # 4. –£–ø–∞–∫–æ–≤–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    final_messages = []
    for coin, coin_pairs in grouped_by_coin.items():
        current_message = f"<b>üîπ ARBITRAGE: {coin}</b>\n\n"
        for pair in coin_pairs:
            formatted = format_pair(pair)
            if len(current_message) + len(formatted) <= max_message_length:
                current_message += formatted
            else:
                final_messages.append(current_message.strip())
                current_message = f"<b>üîπ ARBITRAGE: {coin}</b>\n\n{formatted}"

        if current_message.strip():
            final_messages.append(current_message.strip())

    return final_messages[:max_messages_per_batch]
