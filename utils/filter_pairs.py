import logging
from typing import List, Dict
from decimal import Decimal, InvalidOperation, localcontext
import time


async def recalculate_and_filter_by_net_profit(pairs: dict) -> dict:
    updated_pairs = {}

    for key, data in pairs.items():
        try:
            original_profit = float(data.get("net_profit", 0))
            fee_buy = float(data.get("spot_fee_first_exchange", 0))
            fee_sell = float(data.get("spot_fee_second_exchange", 0))

            clean_profit = original_profit - fee_buy - fee_sell
            if clean_profit > 0:
                data["net_profit"] = round(clean_profit, 2)
                updated_pairs[key] = data

        except Exception as e:
            logging.exception(f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ {key}: {e}")
            continue

    return updated_pairs


async def recalculate_spread_from_net_profit(pairs: dict) -> dict:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç spread –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∫–∏ –∫–∞–∫:
    spread = (net_profit / volume_usdt) * 100
    """
    updated_pairs = {}

    for key, data in pairs.items():
        try:
            net_profit = float(data.get("net_profit", 0))
            volume_usdt = float(data.get("volume_usdt", 0))

            if volume_usdt == 0:
                continue  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

            spread = (net_profit / volume_usdt) * 100
            data["spread"] = round(spread, 2)  # –º–æ–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏

            updated_pairs[key] = data

        except (ValueError, TypeError) as e:
            logging.exception(f"‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ {key}: {e}")
            continue  # –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤—è–∑–∫—É

    return updated_pairs


async def filter_significant_pairs_changes(current_pairs: dict, previous_pairs: dict) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å–≤—è–∑–∫–∏.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ –∫–ª—é—á—É (exchange1:exchange2:coin).
    """

    def is_significant_change(pair_key: str, prev_data: dict, curr_data: dict) -> bool:
        try:
            prev_profit = float(prev_data.get("net_profit", 0))
            curr_profit = float(curr_data.get("net_profit", 0))
            prev_spread = float(prev_data.get("spread", 0))
            curr_spread = float(curr_data.get("spread", 0))

            profit_diff = curr_profit - prev_profit
            spread_diff = curr_spread - prev_spread

            # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
            if profit_diff >= 2.0:
                print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data["net_profit"]}\n"
                      f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data["net_profit"]}\n")
                print(
                    f"‚úÖ {pair_key} ‚Äî net_profit –∏–∑–º–µ–Ω–∏–ª—Å—è: –±—ã–ª–æ {prev_profit:.2f} ‚Üí —Å—Ç–∞–ª–æ {curr_profit:.2f} "
                    f"(+{profit_diff:.2f} USDT)\n\n")
                return True

            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
            if prev_profit > 0:
                profit_percent_change = (profit_diff / prev_profit) * 100
                if profit_percent_change >= 20:
                    print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data['net_profit']}\n"
                          f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data['net_profit']}\n")
                    print(
                        f"‚úÖ {pair_key} ‚Äî net_profit –≤—ã—Ä–æ—Å –Ω–∞ {profit_percent_change:.1f}% "
                        f"(–±—ã–ª–æ {prev_profit:.2f} ‚Üí —Å—Ç–∞–ª–æ {curr_profit:.2f})\n\n")
                    return True

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞
            if spread_diff >= 0.5:
                print(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤—è–∑–∫–∞: {prev_data['spread']}\n"
                      f"–¢–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞: {curr_data['spread']}\n")
                print(
                    f"‚úÖ {pair_key} ‚Äî spread –∏–∑–º–µ–Ω–∏–ª—Å—è: –±—ã–ª–æ {prev_spread:.2f}% ‚Üí —Å—Ç–∞–ª–æ {curr_spread:.2f}% "
                    f"(+{spread_diff:.2f}%)\n\n")
                return True

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            # print(
            #     f"‚ùå {pair_key} ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: "
            #     f"net_profit {prev_profit:.2f} ‚Üí {curr_profit:.2f} "
            #     f"(Œî={profit_diff:.2f}), spread {prev_spread:.2f}% ‚Üí {curr_spread:.2f}% (Œî={spread_diff:.2f}%)"
            # )

        except (ValueError, TypeError, ZeroDivisionError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä—ã {pair_key}: {e}")

        return False

    result = {}

    for key, current_data in current_pairs.items():
        previous_data = previous_pairs.get(key)

        if previous_data is None:
            print(f"üÜï –ù–æ–≤–∞—è —Å–≤—è–∑–∫–∞: {key}")
            result[key] = current_data
        elif is_significant_change(key, previous_data, current_data):
            result[key] = current_data
        # –∏–Ω–∞—á–µ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

    return result


async def group_and_pack_pairs_into_messages(pairs: Dict[str, dict], previous_pairs: Dict[str, dict]) -> List[str]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–≤—è–∑–∫–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º –∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    –ù–æ–≤—ã–µ —Å–≤—è–∑–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∑–∞—Ç–µ–º ‚Äî —Å—Ç–∞—Ä—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞.
    """
    max_message_length = 4096
    max_messages_per_batch = 10

    def smart_round(value) -> str:
        try:
            num = Decimal(str(value))
            abs_num = abs(num)

            # 1. –ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1
            if abs_num < 1:
                with localcontext() as ctx:
                    ctx.prec = 20  # –º–∞–∫—Å–∏–º—É–º —Ç–æ—á–Ω–æ—Å—Ç–∏
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –±–µ–∑ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã
                    plain_str = format(num.normalize(), 'f')

                    # –ù–∞–π–¥—ë–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
                    _, after_dot = plain_str.split(".")
                    leading_zeros = len(after_dot) - len(after_dot.lstrip("0"))
                    significant_part = after_dot[leading_zeros:leading_zeros + 3]
                    formatted = f"0.{after_dot[:leading_zeros + len(significant_part)]}"

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫
                    return formatted if num >= 0 else f"-{formatted}"

            # 2. –ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
            elif abs_num < 100:
                return str(num.quantize(Decimal("1.00")))

            # 3. –ß–∏—Å–ª–æ –æ—Ç 100 –∏ –≤—ã—à–µ
            else:
                return str(num.quantize(Decimal("1.0")))

        except (ValueError, TypeError, InvalidOperation) as e:
            return str(value)

    def format_duration(s: int) -> str:
        d, h, m, sec = s // 86400, s % 86400 // 3600, s % 3600 // 60, s % 60
        if d: return f"{d} –¥." + (f" {h} —á." if h else "") + (f" {m} –º." if m else "")
        if h: return f"{h} —á." + (f" {m} –º–∏–Ω." if m else "")
        return f"{m} –º–∏–Ω. {sec} —Å–µ–∫." if m else f"{sec} —Å–µ–∫."

    def format_currency(value: int) -> str:
        if value < 1_000:
            return str(value)
        elif value < 1_000_000:
            formatted = round(value / 1_000, 1)
            return f"{int(formatted) if formatted == int(formatted) else formatted}–∫"
        elif value < 1_000_000_000:
            formatted = round(value / 1_000_000, 2)
            if formatted * 1_000_000 % 100_000 == 0:
                return f"{int(formatted)}–ú"
            elif formatted * 1_000_000 % 10_000 == 0:
                return f"{round(formatted, 1)}–ú"
            else:
                return f"{formatted}–ú"
        else:
            formatted = round(value / 1_000_000_000, 3)
            return f"{formatted}–ú–õ–†–î"  # –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å "B" –Ω–∞ "–º–ª—Ä–¥" –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ

    def format_pair(arbitrage_pair: dict) -> str:
        # region –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•
        coin_name = arbitrage_pair['coin']
        avg_buy_price = smart_round(arbitrage_pair['avg_buy_price'])
        avg_sell_price = smart_round(arbitrage_pair['avg_sell_price'])
        buy_orders = arbitrage_pair['buy_orders']
        buy_price_range = arbitrage_pair['buy_price_range']
        exchange_buy = arbitrage_pair['exchange_buy']
        exchange_sell = arbitrage_pair['exchange_sell']
        trade_urls = arbitrage_pair.get('trade_urls')

        if not trade_urls:
            print(arbitrage_pair)
            return ""

        trade_urls_buy_link = trade_urls['buy_link']
        trade_urls_sell_link = trade_urls['sell_link']
        first_exchange_coin_confirmations = arbitrage_pair['first_exchange_coin_confirmations']
        first_exchange_coin_contract = arbitrage_pair['first_exchange_coin_contract']
        first_exchange_deposit_withdraw_links = arbitrage_pair.get('first_exchange_deposit_withdraw_links')

        if not first_exchange_deposit_withdraw_links:
            print(arbitrage_pair)
            return ""

        first_exchange_deposit_withdraw_links_withdraw_link = first_exchange_deposit_withdraw_links['withdraw_link']
        first_exchange_loan = arbitrage_pair['first_exchange_loan']
        first_exchange_margin = arbitrage_pair['first_exchange_margin']
        futures = arbitrage_pair['futures']
        net_profit = smart_round(arbitrage_pair['net_profit'])
        network = arbitrage_pair['network']
        profit_coin = smart_round(arbitrage_pair['profit_coin'])
        profit_usdt = arbitrage_pair['profit_usdt']

        second_exchange_coin_contract = arbitrage_pair['second_exchange_coin_contract']
        second_exchange_deposit_withdraw_links = arbitrage_pair['second_exchange_deposit_withdraw_links']
        second_exchange_deposit_withdraw_links_deposit_link = second_exchange_deposit_withdraw_links['deposit_link']
        second_exchange_loan = arbitrage_pair['second_exchange_loan']
        second_exchange_margin = arbitrage_pair['second_exchange_margin']
        sell_orders = arbitrage_pair['sell_orders']
        sell_price_range = arbitrage_pair['sell_price_range']
        spot_fee_first_exchange = smart_round(arbitrage_pair['spot_fee_first_exchange'])
        spot_fee_second_exchange = smart_round(arbitrage_pair['spot_fee_second_exchange'])
        spot_percent_fee_first_exchange = arbitrage_pair['spot_percent_fee_first_exchange']
        spot_percent_fee_second_exchange = arbitrage_pair['spot_percent_fee_second_exchange']
        spread = arbitrage_pair['spread']
        total_buy_amount = smart_round(arbitrage_pair['total_buy_amount'])
        total_sell_amount = smart_round(arbitrage_pair['total_sell_amount'])
        volume_coin = smart_round(arbitrage_pair['volume_coin'])
        volume_usdt = smart_round(arbitrage_pair['volume_usdt'])
        withdraw_fee = smart_round(arbitrage_pair['withdraw_fee'])
        is_new_coin = arbitrage_pair['is_new_coin']

        network_block_time = arbitrage_pair['network_block_time']
        network_deposit_time = arbitrage_pair['network_deposit_time']
        second_exchange_coin_confirmations = arbitrage_pair['second_exchange_coin_confirmations']

        last_trade = arbitrage_pair['last_trade']
        coin_exchange_volume = arbitrage_pair['coin_exchange_volume']
        is_low_bids = arbitrage_pair['is_low_bids']
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–ê –°–•–û–ñ–ï–°–¢–¨ –ö–û–ù–¢–†–ê–ö–¢–û–í
        contract_message = ""
        if (first_exchange_coin_contract and second_exchange_coin_contract) and (
                first_exchange_coin_contract.lower() == second_exchange_coin_contract.lower()):
            contract_message = ("<b>‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã</b>\n"
                                f"<blockquote>{first_exchange_coin_contract}</blockquote>\n\n")
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –°–ï–¢–ò
        confirmations_message = ""
        if second_exchange_coin_confirmations:
            confirmations_message = f"| {second_exchange_coin_confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π "
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–ê –§–¨–Æ–ß–ï–†–°–´
        futures_message = ""
        if futures:
            links = [f"<b><a href='{link}'>{exchange}</a></b>" for exchange, link in futures.items()]
            futures_message = "<b>üõ°Ô∏è –§—å—é—á–µ—Ä—Å—ã:</b> " + " | ".join(links)
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–ê –ó–ê–ô–ú
        loan_message = ""
        if second_exchange_loan:
            loan_message = f"\n        <b>ü§ù <a href='{second_exchange_loan}'>–ö—Ä–∏–ø—Ç–æ –∑–∞–π–º</a></b>"
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–´–ô –ó–ê–ô–ú
        margin_message = ""
        if second_exchange_margin:
            margin_message = f"\n        <b>üîê <a href='{second_exchange_margin}'>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–π–º</a></b>"
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –ù–û–í–ê–Ø –õ–ò –ú–û–ù–ï–¢–ê
        is_new_coin_message = ""
        if is_new_coin:
            is_new_coin_message = f"üÜï "
        # endregion

        # region –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–û–†–û–°–¢–ò –°–ï–¢–ò –ü–û –í–†–ï–ú–ï–ù–ò
        network_deposit_time_message = ""
        network_deposit_time_color_message = ""

        if network_block_time:
            if network_deposit_time:
                avg_time = network_deposit_time['avg_time']
                min_time = network_deposit_time['min_time']
                max_time = network_deposit_time['max_time']

                # 1 –º–∏–Ω—É—Ç–∞ = 60 —Å–µ–∫—É–Ω–¥
                # 1 —á–∞—Å = 60 * 60 = 3600 —Å–µ–∫—É–Ω–¥
                # 1 –¥–µ–Ω—å = 24 * 60 * 60 = 86400 —Å–µ–∫—É–Ω–¥

                if avg_time <= 120:  # 2 –º–∏–Ω—É—Ç—ã
                    network_deposit_time_color_message = "‚ö°Ô∏è"
                elif avg_time <= 300:  # 5 –º–∏–Ω—É—Ç
                    network_deposit_time_color_message = "üü¢"
                elif avg_time <= 1200:  # 20 –º–∏–Ω—É—Ç
                    network_deposit_time_color_message = "üü°"
                elif avg_time <= 3600:  # 1 —á–∞—Å
                    network_deposit_time_color_message = "üî¥"
                elif avg_time > 3600:  # –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
                    network_deposit_time_color_message = "üíÄ"
                network_deposit_time_message = f"~ {format_duration(max_time)}"
            else:
                min_time = int(network_block_time['min_time'])
                max_time = int(network_block_time['max_time'])
                avg_time = int((min_time + max_time) / 2)

                if avg_time <= 5:
                    network_deposit_time_color_message = "üü¢"
                elif avg_time <= 30:
                    network_deposit_time_color_message = "üü°"
                elif avg_time > 30:
                    network_deposit_time_color_message = "üî¥"
                network_deposit_time_message = (f"(–ù–µ–∏–∑–≤. –∫–æ–ª. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)\n"
                                                f"1 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ~ {format_duration(max_time)}")
        else:
            network_deposit_time_color_message = "‚ö™Ô∏è"
            network_deposit_time_message = "| –ù–µ–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏"
        # endregion

        # region –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –ü–û–°–õ–ï–î–ù–ï–ô –¢–û–†–ì–û–í–õ–ò –ò –û–ë–™–Å–ú–ê –ú–û–ù–ï–¢–´ –ó–ê 24 –ß–ê–°–ê
        last_trade_message = ""
        last_trade_sell = last_trade.get(exchange_sell)
        time_now = int(time.time())

        if last_trade_sell:
            last_trade_time = time_now - int(str(last_trade_sell)[:10])
            last_trade_message = f"\n        –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—Ä–≥–æ–≤–ª—è: <b>{format_duration(last_trade_time)} –Ω–∞–∑–∞–¥</b>"

            if "-" in last_trade_message:
                print(f"coin: {coin_name}\n"
                      f"exchange_sell: {exchange_sell}\n"
                      f"last_trade: {last_trade_sell}\n"
                      f"time now: {time_now}\n"
                      f"last_trade_time: {last_trade_time}\n")

        coin_volume_24_message = ""
        coin_volume_24_common = coin_exchange_volume.get(exchange_sell)

        if coin_volume_24_common:
            coin_volume_24_usdt = coin_volume_24_common.get("volume_24h_usdt")

            if coin_volume_24_usdt:
                coin_volume_24_message = f"\n        24—á. –æ–±–æ—Ä–æ—Ç: <b>{format_currency(int(float(coin_volume_24_usdt)))}$</b>"

        is_low_bids_message = ""
        if is_low_bids:
            is_low_bids_message = " ‚ùóÔ∏è –ú–∞–ª–æ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
        # endregion

        # f"        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_buy_price}$</b>\n"
        # f"        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_sell_price}$</b>\n"

        message = (f"{is_new_coin_message}<b><code>{coin_name}</code> | <a href='{trade_urls_buy_link}'>{exchange_buy}</a> ‚Üí "
                   f"<a href='{trade_urls_sell_link}'>{exchange_sell}</a> | "
                   f"{format_currency(int(float(total_buy_amount)))}$ | {spread}% | +{net_profit}$</b>\n\n"
                   f""
                   f""
                   f"<b>1Ô∏è‚É£ <a href='{trade_urls_buy_link}'>{exchange_buy}</a> | "
                   f"<a href='{first_exchange_deposit_withdraw_links_withdraw_link}'>–í—ã–≤–æ–¥</a></b>\n"
                   f""
                   f"        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_buy_price}$</b>\n"
                   f"        –û—Ä–¥–µ—Ä–∞: <b>{buy_price_range}</b>\n"
                   f"        –û–±—ä—ë–º: <b>{total_buy_amount}$ | {volume_coin} ${coin_name}</b>\n\n"
                   f""
                   f""
                   f"<b>2Ô∏è‚É£ <a href='{trade_urls_sell_link}'>{exchange_sell}</a> | "
                   f"<a href='{second_exchange_deposit_withdraw_links_deposit_link}'>–î–µ–ø–æ–∑–∏—Ç</a></b>\n"
                   f""
                   f"        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_sell_price}$</b>\n"
                   f"        –û—Ä–¥–µ—Ä–∞: <b>{sell_price_range}{is_low_bids_message}</b>\n"
                   f"        –û–±—ä—ë–º: <b>{total_sell_amount}$</b>"
                   f"{coin_volume_24_message}"
                   f"{last_trade_message}"
                   f"{loan_message}"
                   f"{margin_message}"
                   f""
                   f"\n\n"
                   f""
                   f""
                   f"{contract_message}"
                   f""
                   f""
                   f"<b>üîó –°–µ—Ç—å:</b> {network} {network_deposit_time_color_message} {confirmations_message} {network_deposit_time_message}\n"
                   f"<b>üíµ –ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç:</b> {net_profit}$ | {profit_coin} ${coin_name}\n"
                   f"<b>üìä Spread:</b> {spread}%\n"
                   f"<b>‚úÇÔ∏è –ö–æ–º–∏—Å—Å–∏–∏:</b> <b>B</b> ‚Äî {spot_fee_first_exchange}$, <b>S</b> ‚Äî {spot_fee_second_exchange}$, "
                   f"<b>W</b> ‚Äî {withdraw_fee}$\n\n"
                   f""
                   f"{futures_message}"
                   f""
                   f"\n\n\n")

        return message

    # 1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –∏ —Å—Ç–∞—Ä—ã–µ
    new_pairs = {k: v for k, v in pairs.items() if k not in previous_pairs}
    old_pairs = {k: v for k, v in pairs.items() if k in previous_pairs}

    # 2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –Ω–æ–≤—ã–µ (–≤–≤–µ—Ä—Ö) + —Å—Ç–∞—Ä—ã–µ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ net_profit ‚Üì)
    sorted_pairs = {
        **{k: new_pairs[k] for k in sorted(new_pairs, key=lambda x: float(new_pairs[x].get("net_profit", 0)), reverse=True)},
        **{k: old_pairs[k] for k in sorted(old_pairs, key=lambda x: float(old_pairs[x].get("net_profit", 0)), reverse=True)}
    }

    # 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º
    grouped_by_coin = {}
    for key, pair in sorted_pairs.items():
        coin = pair.get("coin")
        if coin not in grouped_by_coin:
            grouped_by_coin[coin] = []
        grouped_by_coin[coin].append(pair)

    # 4. –£–ø–∞–∫–æ–≤–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    final_messages = []
    for coin, coin_pairs in grouped_by_coin.items():
        current_message = ""
        for pair in coin_pairs:
            formatted = format_pair(pair)
            if len(current_message) + len(formatted) <= max_message_length:
                current_message += formatted
            else:
                final_messages.append(current_message.strip())
                current_message = formatted

        if current_message.strip():
            final_messages.append(current_message.strip())

    return final_messages[:max_messages_per_batch]
