from utils.texts import TEXTS


class TextProxy:
    def __init__(self, data: dict, lang: str, fallback: str = "ru"):
        self._data = data
        self._lang = lang
        self._fallback = fallback

        self._known_langs = {"ru", "en", "ua", "uk", "es", "de", "fr"}

    def __getattr__(self, item):
        value = self._data.get(item)

        if value is None:
            raise AttributeError(f"TextProxy: –∫–ª—é—á '{item}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # üî• –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å, –∏ –µ–≥–æ –∫–ª—é—á–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∏
        if isinstance(value, dict):
            keys = set(value.keys())

            if keys.issubset(self._known_langs):
                # ‚úÖ –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                return value.get(self._lang) or value.get(self._fallback)

            # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å
            return TextProxy(value, self._lang, self._fallback)

        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return value

    def __str__(self):
        # –î–∞–∂–µ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –Ω–µ—è–∑—ã–∫–æ–≤—ã–µ –∫–ª—é—á–∏ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ —è–∑—ã–∫–æ–≤–æ–π –∫–ª—é—á –µ—Å—Ç—å
        if isinstance(self._data, dict):
            if self._lang in self._data or self._fallback in self._data:
                value = self._data.get(self._lang) or self._data.get(self._fallback)
                if isinstance(value, str):
                    return value

        if isinstance(self._data, str):
            return self._data

        raise TypeError("TextProxy –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥—ë–Ω –∫ —Å—Ç—Ä–æ–∫–µ (–Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ —è–∑—ã–∫—É)")

